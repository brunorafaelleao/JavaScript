1) Editor de códigos
-> Para trabalhar com a linguagem programação JavaScript usaremos o
VS CODE e o NODE.JS. O Vs Code para editar os códigos e o Node para executar

2) Variáveis
-> As variáveis devem ter seu nome sem caracteres especiais, exceto "$" cifrão ou
underline "_".
-> As variáveis não podem ter seus identificadores começando com número, mas elas
podem ter número ao longo do nome.

3) Operadores
-> Para trabalhar com operações:
+ Adição
- Subtração
* Multiplicação
/ Divisão
** Exponenciação
% Resto da divisão (modulus)
++ incremento
-- decremento
-> É possível fazer junções (concatenações de variáveis usando +)
ex:
const texto1 = 'Olá';
const texto2 = 'Mundo';
const textofinal = texto1 + texto2;
console.log(textofinal);

4) Para declarar variáveis constantes e mutáveis e exibir algo no interpretador
-> Constantes: const =
-> Mutáveis: let =
-> para exibir: console.log()

5) Atalho para formatação Prettier:
-> alt + shift+ F

6) Tipos de dados:
-> String = deve ser declarado entre aspas duplas ou simples, mas tem o uso da crase.
No caso da crase, vira uma string template que permite usarmos expressõe embutidas em si
ex:
const texto1 = 'aqui tem uma string normal';
const texto2 = "Essa tbm é uma string normal";
const numero = 3142;
const stringTemplate = `o numero que decidi registrar é ${numero}´;

-> Number = é o tipo de dado que representa informaçõe numéricas (inteiros positivos ou negativos, decimais)
ex:
const num1 = 27;
const num2 = 23.25;
const num3 = -40;
const total = num1 + num2 + num3;

console.log(total);
//resultado é 10.25

7) Tipo Booleano
-> são valores do tipo true ou false
ex:
const x = true;
const y = false;
-> Operadores booleanos
&& = AND (e) para operações em que as duas condições são simultaneamentes verdadeiras
|| = OR(ou) para operações em que pelo menos uma das condições seja verdadeira
! = NOT(não, inverso) para operações em que queremos o inverso do valor booleano

8) Operadores de comparação
-> Para comparar se um valor é igual a outro: ===
-> Para comparar se um valor é diferente de outro: !==
-> Para comparar se um valor é maior ou igual: >=
-> Para comparar se um valor é menor ou igual: <=
-> Menor que: <
-> Maior que: >
Obs: diferença entre === e == é a restrição, pois o === faz uma comparação rígida e restrita
que analisa o dado e o tipo de dado.

9) Tipos Referência (Object)
-> Object (Objeto) = É um documento que tem campos e valores associados. É uma única variável que contém
todo um conjunto de informações sobre um elemento.
exemplo de sua estrutura:
const documentoIdentidade = {
  nome: "Bruno",
  sobrenome: "Leão",
  cpf: "944.965.012-87",
  empresa: "SEMSA",
  idade: 34,
};
-> Para acessar um dado do Object = console.log(documentoIdentidade.empresa); ou console.log(documentoIdentidade["empresa"]);

10) Tipos Referência (Array)
-> O Array é como uma lista de informações, lista de valores.
ex:
const investimentoMensal = [1000, 2000, 3000, 2000, 1500, 1200, 1300];

console.log(`O valor investido no mês de janeiro é: ${investimentoMensal[0]}`);

//no exemplo acima temos uma variável  array com valores de investimento. Os valores de um array devem estar dentro de
//colchetes e separados por vírgula: const investimentoMensal = [1000, 2000, 3000, 2000, 1500, 1200, 1300];
//Para acessar um valor em um array fazemos a busca usando: investimentoMensal[0] nome do array seguido do número do array dentro de colchetes

//Se for pra exibir todos os valores do array: console.log(investimentoMensal);

11) Inserir valor em um objeto ou array.
ex: 
let musica = {
  nome: "Let it be",
  artista: "The Beatles",
  album: "Let it be",
};

let listaDeBandas = [
  "Beatles",
  "Rolling Stones",
  "Led Zeppelin",
  "Cassia Eller",
  "Chico Buarque",
];

//para inserir um novo elemento no array. Inserir Skank em lista de bandas
//console.log(listaDeBandas);
//listaDeBandas[5] = "Skank";
//console.log(listaDeBandas);

//para inserir um novo elemento no objeto. Inserir o ano do álbum.
console.log(musica);
musica.ano = 1969;
console.log(musica);

12) Funções
-> Blocos de códigos que realizam tarefas específicas. São também conjunstos de instruções
-> A palavra chave para uma função é "function"
ex: Criar uma função que exibe uma saudação.
function saudacao (nome){
  console.log(`Olá ${nome}, bem vindo ao nosso site`);
}
saudacao("Bruno");
//Ao fazer isso, o sistema vai retornar o que foi declarado dentro da função
obs: Uma função precisa ser inicada com a palavra function, seguida do nome da função, parâmetros e instrução.
function = palava chave ou palavra reservada para declarar uma função
saudacao = nome da função e não pode ser uma palava reservada
(nome) = parametro
{console.log(`Olá ${nome}, bem vindo ao nosso site`);} = instrução da função
Quando chamamos a função usamos os argumentos que substituem o parametro

13) Para arredondar um valor double/float/decimal em JavaScript podemos usar o 
-> método toFixed()
ex:
${valorfinal.toFixed(2)}
//Na expressão anterior  dizemos que queremos arredondar/fixar o valor final com duas casas decimais.
OBS: Esse método transforma o valor de number para string. Caso esse valor não seja usado novamente pode usar.


14) Função/Método dentro de um objeto
-> É possível inserir uma função (método) dentro de um objeto e assim chamar essa função fora do objeto.
ex: Criar uma função dentro de um objeto casa cujo os parametros serão valores do próprio objeto. 
Para isso dentro do cálculo usaremos "this"
let casa = {
  //tamanho dos comodos é em metros quadrados
  cor: "#fff",
  sala: 15,
  cozinha: 10,
  banheiro: 8,
  quarto: 20,
  areaTotaldaCasa: function () {
    const tamanhoTotal = this.sala + this.cozinha + this.banheiro + this.quarto;
    console.log(`O tamanho total da casa é de ${tamanhoTotal}m²`);
    return tamanhoTotal;
  },
};

casa.areaTotaldaCasa();

15) Tipos de métodos:
ex:
let a = 2.0000001;

console.log(a); //imprime a
console.log(a.toFixed(2)); //imprime com dois valores após a vírgula porém vira uma string
console.log(a.toString()); //imprime a como uma string

let b = "texto qualquer";

console.log(b); //imprime b
console.log(b.length); //imprime o comprimento de b
console.log(b.concat(" novo")); //concatena com a string passada dentro do parenteses concat(" novo")
console.log(b.toUpperCase()); //imprime b em maiúsculo
console.log(b.toLowerCase()); //imprime b em minúsculo
console.log(b.split(" ")); //divide a string em um array de strings




